function_parser.c:    token_t *function_token = token_new_no_data(token_id);
function_parser.c:    token_t *formal_parameter_list_token = token_new_no_data(
function_parser.c:    token_t *function_body_token = token_new_no_data(
syntactic_parser_utils.h:        token = tokenize_func((input), (position_p)); \
syntactic_parser_utils.h:        token = tokenize_func((input), (position_p)); \
program_parser.c:    token_t *program_token = token_new_no_data(TOKEN_PROGRAM_PROGRAM);
syntactic_parser_utils.c:    token_t *token = token_get_or_null(input, *position_p);
syntactic_parser_utils.c:    token_t *token = token_get_or_null(input, position);
syntactic_parser_utils.c:    token_t *token = token_get_or_null(input, *position_p);
syntactic_parser_utils.c:    token_t *token = token_get_or_null(input, *position_p);
syntactic_parser_utils.c:    token_t *token = token_get_or_null(input, position);
syntactic_parser_utils.c:    token_t *token = token_get_or_null(input, position);
parser.c:    token_t *token = g_new_1(token_t);
lexical_parser.c:        token = lexical_token(input_p);
lexical_parser.c:        token = binary_integer_literal(input_p);
lexical_parser.c:        token = octal_integer_literal(input_p);
lexical_parser.c:        token = hex_integer_literal(input_p);
lexical_parser.c:        token = decimal_literal(input_p);
expression_parser.c:    token_t *token = token_get_or_null(input, *position_p);
expression_parser.c:    token_t *array_literal_token = token_new_no_data(
expression_parser.c:    token_t *object_literal_token = token_new_no_data(
expression_parser.c:    token_t *property_assignment_plain_token = token_new_no_data(
expression_parser.c:    token_t *property_assignment_get_token = token_new_no_data(
expression_parser.c:    token_t *property_assignment_get_token = token_new_no_data(
expression_parser.c:            token_t *property_accessor_token = token_new_no_data(
expression_parser.c:            callable_expression_token = property_accessor_token;
expression_parser.c:            token_t *property_accessor_token = token_new_no_data(
expression_parser.c:            callable_expression_token = property_accessor_token;
expression_parser.c:            token_t *call_expression_token = token_new_no_data(
expression_parser.c:            callable_expression_token = call_expression_token;
expression_parser.c:    token_t *argument_list_token = token_new_no_data(
expression_parser.c:    token_t *new_expression_token = token_new_no_data(
expression_parser.c:        token_t *postfix_expression_token = token_new_no_data(
expression_parser.c:        token_t *unary_expression_token = token_new_no_data(
expression_parser.c:        token_t *multiplicative_expression_token = token_new_no_data(
expression_parser.c:        token_t *additive_expression_token = token_new_no_data(
expression_parser.c:        multiplicative_or_additive_expression_token = additive_expression_token;
expression_parser.c:        token_t *shift_expression_token = token_new_no_data(
expression_parser.c:        additive_or_shift_expression_token = shift_expression_token;
expression_parser.c:        token_t *relational_expression_token = token_new_no_data(
expression_parser.c:        shift_or_relational_expression_token = relational_expression_token;
expression_parser.c:        token_t *equality_expression_token = token_new_no_data(
expression_parser.c:        relational_or_equality_expression_token = equality_expression_token;
expression_parser.c:            token_t *name##_token = token_new_no_data((id)); \
expression_parser.c:            parent_name##_or_##name##_token = name##_token; \
expression_parser.c:        token_t *conditional_expression_token = token_new_no_data(
expression_parser.c:        token_t *assignment_expression_token = token_new_no_data(
expression_parser.c:        token_t *expression_token = token_new_no_data(
statement_parser.c:    token_t *block_token = token_new_no_data(TOKEN_STATEMENT_BLOCK);
statement_parser.c:            token_t *variable_declaration_list_token = token_new_no_data(
statement_parser.c:                token_t *variable_declaration_list_token = token_new_no_data(
statement_parser.c:    token_t *continue_statement_token = token_new_no_data(
statement_parser.c:    token_t *break_statement_token = token_new_no_data(
statement_parser.c:    token_t *return_statement_token = token_new_no_data(
statement_parser.c:    token_t *labeled_statement_token = token_new_no_data(
statement_parser.c:    token_t *switch_statement_token = token_new_no_data(
statement_parser.c:    token_t *case_clause_token = token_new_no_data(TOKEN_STATEMENT_CASE_CLAUSE);
statement_parser.c:    token_t *default_clause_token = token_new_no_data(
statement_parser.c:    token_t *throw_statement_token = token_new_no_data(
statement_parser.c:    token_t *try_statement_token = token_new_no_data(
statement_parser.c:    token_t *expression_statement_token = token_new_no_data(
